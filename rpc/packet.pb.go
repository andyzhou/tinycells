// Code generated by protoc-gen-go. DO NOT EDIT.
// source: packet.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	packet.proto

It has these top-level messages:
	Packet
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message for packet
type Packet struct {
	Kind     int32  `protobuf:"varint,1,opt,name=kind" json:"kind,omitempty"`
	PlayerId int64  `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
	DataId   int64  `protobuf:"varint,3,opt,name=dataId" json:"dataId,omitempty"`
	Json     string `protobuf:"bytes,4,opt,name=json" json:"json,omitempty"`
	BRet     bool   `protobuf:"varint,5,opt,name=bRet" json:"bRet,omitempty"`
	ErrCode  int32  `protobuf:"varint,6,opt,name=errCode" json:"errCode,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Packet) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *Packet) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Packet) GetDataId() int64 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *Packet) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

func (m *Packet) GetBRet() bool {
	if m != nil {
		return m.BRet
	}
	return false
}

func (m *Packet) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func init() {
	proto.RegisterType((*Packet)(nil), "rpc.Packet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PacketService service

type PacketServiceClient interface {
	// packet request, use stream mode
	StreamReq(ctx context.Context, opts ...grpc.CallOption) (PacketService_StreamReqClient, error)
	// generate request
	SendReq(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error)
}

type packetServiceClient struct {
	cc *grpc.ClientConn
}

func NewPacketServiceClient(cc *grpc.ClientConn) PacketServiceClient {
	return &packetServiceClient{cc}
}

func (c *packetServiceClient) StreamReq(ctx context.Context, opts ...grpc.CallOption) (PacketService_StreamReqClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PacketService_serviceDesc.Streams[0], c.cc, "/rpc.PacketService/StreamReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetServiceStreamReqClient{stream}
	return x, nil
}

type PacketService_StreamReqClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type packetServiceStreamReqClient struct {
	grpc.ClientStream
}

func (x *packetServiceStreamReqClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packetServiceStreamReqClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packetServiceClient) SendReq(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := grpc.Invoke(ctx, "/rpc.PacketService/SendReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PacketService service

type PacketServiceServer interface {
	// packet request, use stream mode
	StreamReq(PacketService_StreamReqServer) error
	// generate request
	SendReq(context.Context, *Packet) (*Packet, error)
}

func RegisterPacketServiceServer(s *grpc.Server, srv PacketServiceServer) {
	s.RegisterService(&_PacketService_serviceDesc, srv)
}

func _PacketService_StreamReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketServiceServer).StreamReq(&packetServiceStreamReqServer{stream})
}

type PacketService_StreamReqServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type packetServiceStreamReqServer struct {
	grpc.ServerStream
}

func (x *packetServiceStreamReqServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packetServiceStreamReqServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PacketService_SendReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).SendReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PacketService/SendReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).SendReq(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _PacketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PacketService",
	HandlerType: (*PacketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReq",
			Handler:    _PacketService_SendReq_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReq",
			Handler:       _PacketService_StreamReq_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "packet.proto",
}

func init() { proto.RegisterFile("packet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xb1, 0x4e, 0xc4, 0x30,
	0x0c, 0x86, 0x65, 0x7a, 0x97, 0xbb, 0x33, 0xb0, 0x78, 0x40, 0xd1, 0x4d, 0x11, 0x2c, 0x61, 0xa9,
	0x10, 0x3c, 0x02, 0x53, 0x37, 0x94, 0x3e, 0x00, 0x4a, 0x13, 0x0f, 0xa5, 0xd0, 0x04, 0x13, 0x21,
	0xf1, 0x1a, 0x3c, 0x31, 0x6a, 0x0a, 0x88, 0x89, 0xed, 0xfb, 0xfe, 0xfc, 0x8a, 0x2d, 0xe3, 0x59,
	0xf6, 0x61, 0xe2, 0xd2, 0x66, 0x49, 0x25, 0x51, 0x23, 0x39, 0x5c, 0x7e, 0x02, 0xaa, 0x87, 0x9a,
	0x12, 0xe1, 0x66, 0x1a, 0xe7, 0xa8, 0xc1, 0x80, 0xdd, 0xba, 0xca, 0x74, 0xc4, 0x7d, 0x7e, 0xf6,
	0x1f, 0x2c, 0x5d, 0xd4, 0x27, 0x06, 0x6c, 0xe3, 0x7e, 0x9d, 0x2e, 0x50, 0x45, 0x5f, 0x7c, 0x17,
	0x75, 0x53, 0x5f, 0xbe, 0x6d, 0xf9, 0xe7, 0xe9, 0x2d, 0xcd, 0x7a, 0x63, 0xc0, 0x1e, 0x5c, 0xe5,
	0x25, 0x1b, 0x1c, 0x17, 0xbd, 0x35, 0x60, 0xf7, 0xae, 0x32, 0x69, 0xdc, 0xb1, 0xc8, 0x7d, 0x8a,
	0xac, 0x55, 0x1d, 0xf9, 0xa3, 0xb7, 0x8f, 0x78, 0xbe, 0xee, 0xd4, 0xb3, 0xbc, 0x8f, 0x81, 0xe9,
	0x1a, 0x0f, 0x7d, 0x11, 0xf6, 0x2f, 0x8e, 0x5f, 0xe9, 0xb4, 0x95, 0x1c, 0xda, 0xb5, 0x70, 0xfc,
	0x2b, 0x16, 0x6e, 0x80, 0xae, 0x70, 0xd7, 0xf3, 0x1c, 0xff, 0x2d, 0x0e, 0xaa, 0x5e, 0xe0, 0xee,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x57, 0xee, 0xa3, 0xa5, 0x11, 0x01, 0x00, 0x00,
}
